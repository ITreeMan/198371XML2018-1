
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.lang.*;
import java.util.Random;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\005\000\002\002\004\000\002\002" +
    "\004\000\002\002\005\000\002\002\004\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\004\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\004\000\002\003\005\000\002\003\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\071\000\112\006\016\011\015\013\010\016\004\017" +
    "\022\020\046\021\005\022\023\023\013\024\006\025\025" +
    "\026\033\027\007\030\027\031\050\032\031\033\045\034" +
    "\030\035\014\036\034\037\020\040\012\041\032\042\040" +
    "\043\026\044\042\045\024\046\047\047\017\050\037\051" +
    "\011\052\044\053\036\054\021\055\041\056\035\001\002" +
    "\000\020\004\ufff7\005\ufff7\006\ufff7\010\ufff7\012\ufff7\014" +
    "\ufff7\015\ufff7\001\002\000\020\004\ufff4\005\ufff4\006\ufff4" +
    "\010\ufff4\012\ufff4\014\ufff4\015\ufff4\001\002\000\020\004" +
    "\ufff1\005\ufff1\006\ufff1\010\ufff1\012\ufff1\014\ufff1\015\ufff1" +
    "\001\002\000\020\004\uffee\005\uffee\006\uffee\010\uffee\012" +
    "\uffee\014\uffee\015\uffee\001\002\000\112\006\016\011\015" +
    "\013\010\016\004\017\022\020\046\021\005\022\023\023" +
    "\013\024\006\025\025\026\033\027\007\030\027\031\050" +
    "\032\031\033\045\034\030\035\014\036\034\037\020\040" +
    "\012\041\032\042\040\043\026\044\042\045\024\046\047" +
    "\047\017\050\037\051\011\052\044\053\036\054\021\055" +
    "\041\056\035\001\002\000\020\004\uffdc\005\uffdc\006\uffdc" +
    "\010\uffdc\012\uffdc\014\uffdc\015\uffdc\001\002\000\020\004" +
    "\uffe5\005\uffe5\006\uffe5\010\uffe5\012\uffe5\014\uffe5\015\uffe5" +
    "\001\002\000\020\004\ufff2\005\ufff2\006\ufff2\010\ufff2\012" +
    "\ufff2\014\ufff2\015\ufff2\001\002\000\020\004\uffe8\005\uffe8" +
    "\006\uffe8\010\uffe8\012\uffe8\014\uffe8\015\uffe8\001\002\000" +
    "\112\006\016\011\015\013\010\016\004\017\022\020\046" +
    "\021\005\022\023\023\013\024\006\025\025\026\033\027" +
    "\007\030\027\031\050\032\031\033\045\034\030\035\014" +
    "\036\034\037\020\040\012\041\032\042\040\043\026\044" +
    "\042\045\024\046\047\047\017\050\037\051\011\052\044" +
    "\053\036\054\021\055\041\056\035\001\002\000\112\006" +
    "\016\011\015\013\010\016\004\017\022\020\046\021\005" +
    "\022\023\023\013\024\006\025\025\026\033\027\007\030" +
    "\027\031\050\032\031\033\045\034\030\035\014\036\034" +
    "\037\020\040\012\041\032\042\040\043\026\044\042\045" +
    "\024\046\047\047\017\050\037\051\011\052\044\053\036" +
    "\054\021\055\041\056\035\001\002\000\020\004\uffde\005" +
    "\uffde\006\uffde\010\uffde\012\uffde\014\uffde\015\uffde\001\002" +
    "\000\020\004\uffe6\005\uffe6\006\uffe6\010\uffe6\012\uffe6\014" +
    "\uffe6\015\uffe6\001\002\000\020\004\uffd9\005\uffd9\006\uffd9" +
    "\010\uffd9\012\uffd9\014\uffd9\015\uffd9\001\002\000\020\004" +
    "\ufff6\005\ufff6\006\ufff6\010\ufff6\012\ufff6\014\ufff6\015\ufff6" +
    "\001\002\000\020\004\ufff3\005\ufff3\006\ufff3\010\ufff3\012" +
    "\ufff3\014\ufff3\015\ufff3\001\002\000\020\004\uffe0\005\uffe0" +
    "\006\uffe0\010\uffe0\012\uffe0\014\uffe0\015\uffe0\001\002\000" +
    "\020\004\ufff0\005\ufff0\006\ufff0\010\ufff0\012\ufff0\014\ufff0" +
    "\015\ufff0\001\002\000\020\004\uffe2\005\uffe2\006\uffe2\010" +
    "\uffe2\012\uffe2\014\uffe2\015\uffe2\001\002\000\020\004\uffed" +
    "\005\uffed\006\uffed\010\uffed\012\uffed\014\uffed\015\uffed\001" +
    "\002\000\020\004\uffe9\005\uffe9\006\uffe9\010\uffe9\012\uffe9" +
    "\014\uffe9\015\uffe9\001\002\000\020\004\uffeb\005\uffeb\006" +
    "\uffeb\010\uffeb\012\uffeb\014\uffeb\015\uffeb\001\002\000\020" +
    "\004\uffe4\005\uffe4\006\uffe4\010\uffe4\012\uffe4\014\uffe4\015" +
    "\uffe4\001\002\000\020\004\uffef\005\uffef\006\uffef\010\uffef" +
    "\012\uffef\014\uffef\015\uffef\001\002\000\020\004\uffe7\005" +
    "\uffe7\006\uffe7\010\uffe7\012\uffe7\014\uffe7\015\uffe7\001\002" +
    "\000\020\004\uffd5\005\uffd5\006\uffd5\010\uffd5\012\uffd5\014" +
    "\uffd5\015\uffd5\001\002\000\020\004\uffda\005\uffda\006\uffda" +
    "\010\uffda\012\uffda\014\uffda\015\uffda\001\002\000\020\004" +
    "\uffdd\005\uffdd\006\uffdd\010\uffdd\012\uffdd\014\uffdd\015\uffdd" +
    "\001\002\000\020\004\uffe3\005\uffe3\006\uffe3\010\uffe3\012" +
    "\uffe3\014\uffe3\015\uffe3\001\002\000\020\004\uffd8\005\uffd8" +
    "\006\uffd8\010\uffd8\012\uffd8\014\uffd8\015\uffd8\001\002\000" +
    "\020\004\uffe1\005\uffe1\006\uffe1\010\uffe1\012\uffe1\014\uffe1" +
    "\015\uffe1\001\002\000\016\004\067\005\054\006\057\010" +
    "\061\012\060\015\066\001\002\000\020\004\uffdb\005\uffdb" +
    "\006\uffdb\010\uffdb\012\uffdb\014\uffdb\015\uffdb\001\002\000" +
    "\020\004\uffea\005\uffea\006\uffea\010\uffea\012\uffea\014\uffea" +
    "\015\uffea\001\002\000\020\004\ufff5\005\ufff5\006\ufff5\010" +
    "\ufff5\012\ufff5\014\ufff5\015\ufff5\001\002\000\020\004\uffdf" +
    "\005\uffdf\006\uffdf\010\uffdf\012\uffdf\014\uffdf\015\uffdf\001" +
    "\002\000\020\004\uffec\005\uffec\006\uffec\010\uffec\012\uffec" +
    "\014\uffec\015\uffec\001\002\000\114\002\052\006\016\011" +
    "\015\013\010\016\004\017\022\020\046\021\005\022\023" +
    "\023\013\024\006\025\025\026\033\027\007\030\027\031" +
    "\050\032\031\033\045\034\030\035\014\036\034\037\020" +
    "\040\012\041\032\042\040\043\026\044\042\045\024\046" +
    "\047\047\017\050\037\051\011\052\044\053\036\054\021" +
    "\055\041\056\035\001\002\000\004\002\000\001\002\000" +
    "\016\004\056\005\054\006\057\010\061\012\060\015\055" +
    "\001\002\000\112\006\016\011\015\013\010\016\004\017" +
    "\022\020\046\021\005\022\023\023\013\024\006\025\025" +
    "\026\033\027\007\030\027\031\050\032\031\033\045\034" +
    "\030\035\014\036\034\037\020\040\012\041\032\042\040" +
    "\043\026\044\042\045\024\046\047\047\017\050\037\051" +
    "\011\052\044\053\036\054\021\055\041\056\035\001\002" +
    "\000\114\002\ufffe\006\ufffe\011\ufffe\013\ufffe\016\ufffe\017" +
    "\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe" +
    "\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034" +
    "\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe" +
    "\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051" +
    "\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe\001\002" +
    "\000\114\002\001\006\001\011\001\013\001\016\001\017" +
    "\001\020\001\021\001\022\001\023\001\024\001\025\001" +
    "\026\001\027\001\030\001\031\001\032\001\033\001\034" +
    "\001\035\001\036\001\037\001\040\001\041\001\042\001" +
    "\043\001\044\001\045\001\046\001\047\001\050\001\051" +
    "\001\052\001\053\001\054\001\055\001\056\001\001\002" +
    "\000\112\006\016\011\015\013\010\016\004\017\022\020" +
    "\046\021\005\022\023\023\013\024\006\025\025\026\033" +
    "\027\007\030\027\031\050\032\031\033\045\034\030\035" +
    "\014\036\034\037\020\040\012\041\032\042\040\043\026" +
    "\044\042\045\024\046\047\047\017\050\037\051\011\052" +
    "\044\053\036\054\021\055\041\056\035\001\002\000\112" +
    "\006\016\011\015\013\010\016\004\017\022\020\046\021" +
    "\005\022\023\023\013\024\006\025\025\026\033\027\007" +
    "\030\027\031\050\032\031\033\045\034\030\035\014\036" +
    "\034\037\020\040\012\041\032\042\040\043\026\044\042" +
    "\045\024\046\047\047\017\050\037\051\011\052\044\053" +
    "\036\054\021\055\041\056\035\001\002\000\112\006\016" +
    "\011\015\013\010\016\004\017\022\020\046\021\005\022" +
    "\023\023\013\024\006\025\025\026\033\027\007\030\027" +
    "\031\050\032\031\033\045\034\030\035\014\036\034\037" +
    "\020\040\012\041\032\042\040\043\026\044\042\045\024" +
    "\046\047\047\017\050\037\051\011\052\044\053\036\054" +
    "\021\055\041\056\035\001\002\000\020\004\ufffa\005\ufffa" +
    "\006\ufffa\010\ufffa\012\ufffa\014\ufffa\015\ufffa\001\002\000" +
    "\020\004\ufff9\005\ufff9\006\ufff9\010\ufff9\012\ufff9\014\ufff9" +
    "\015\ufff9\001\002\000\020\004\ufffb\005\ufffb\006\ufffb\010" +
    "\061\012\060\014\ufffb\015\ufffb\001\002\000\020\004\ufffc" +
    "\005\ufffc\006\ufffc\010\061\012\060\014\ufffc\015\ufffc\001" +
    "\002\000\114\002\ufffd\006\ufffd\011\ufffd\013\ufffd\016\ufffd" +
    "\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025" +
    "\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd" +
    "\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042" +
    "\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd" +
    "\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\001" +
    "\002\000\114\002\uffff\006\uffff\011\uffff\013\uffff\016\uffff" +
    "\017\uffff\020\uffff\021\uffff\022\uffff\023\uffff\024\uffff\025" +
    "\uffff\026\uffff\027\uffff\030\uffff\031\uffff\032\uffff\033\uffff" +
    "\034\uffff\035\uffff\036\uffff\037\uffff\040\uffff\041\uffff\042" +
    "\uffff\043\uffff\044\uffff\045\uffff\046\uffff\047\uffff\050\uffff" +
    "\051\uffff\052\uffff\053\uffff\054\uffff\055\uffff\056\uffff\001" +
    "\002\000\020\004\uffd7\005\uffd7\006\uffd7\010\uffd7\012\uffd7" +
    "\014\uffd7\015\uffd7\001\002\000\014\005\054\006\057\010" +
    "\061\012\060\014\072\001\002\000\020\004\uffd6\005\uffd6" +
    "\006\uffd6\010\uffd6\012\uffd6\014\uffd6\015\uffd6\001\002\000" +
    "\020\004\ufff8\005\ufff8\006\ufff8\010\ufff8\012\ufff8\014\ufff8" +
    "\015\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\071\000\006\002\050\003\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\070" +
    "\001\001\000\004\003\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\063\001\001\000\004\003\062\001\001\000\004\003\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
//@@CUPDBG1

  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
//@@CUPDBG2
 return lexer.next_token(); 
    }

//@@CUPDBG0

  protected Lexer lexer;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr_list ::= expr_list expr SEMI 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG3
  if (e == 101) System.out.print("*0.01"); 
												else if (e == 102) System.out.print("*0.1"); 
												else if (e == 103) System.out.print("*1"); 
												else if (e == 104) System.out.print("*10"); 
												else if (e == 105) System.out.print("*100"); 
												else if (e == 106) System.out.print("*1k"); 
												else if (e == 107) System.out.print("*10k"); 
												else if (e == 108) System.out.print("*100k"); 
												else if (e == 109) System.out.print("*1M"); 
												else if (e == 110) System.out.print("*10M"); 
												else if (e == 1000) System.out.println("+-10%"); 
												else if (e == 1500) System.out.println("+-5%"); 
												else System.out.print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr_list EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= expr SEMI 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG4
  if (e == 101) System.out.print("*0.01"); 
												else if (e == 102) System.out.print("*0.1"); 
												else if (e == 103) System.out.print("*1"); 
												else if (e == 104) System.out.print("*10"); 
												else if (e == 105) System.out.print("*100"); 
												else if (e == 106) System.out.print("*1k"); 
												else if (e == 107) System.out.print("*10k"); 
												else if (e == 108) System.out.print("*100k"); 
												else if (e == 109) System.out.print("*1M"); 
												else if (e == 110) System.out.print("*10M"); 
												else if (e == 1000) System.out.println("+-10%"); 
												else if (e == 1500) System.out.println("+-5%"); 
												else System.out.print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr_list ::= expr_list expr EQUAL 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG5
 if (e < -1000000) System.out.println(Math.sqrt(e+10000000)); 
												else System.out.println(e + Math.sqrt(0)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr_list ::= expr EQUAL 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG6
 if (e < -1000000) System.out.println(Math.sqrt(e+10000000)); 
												else System.out.println(e + Math.sqrt(0)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= expr PLUS expr 
            {
              Integer RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG7
 RESULT = e1+e2;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= expr MINUS expr 
            {
              Integer RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG8
 RESULT = e1-e2;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr TIMES expr 
            {
              Integer RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG9
 RESULT = e1*e2;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= expr DIVIDE expr 
            {
              Integer RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG10
 RESULT = e1/e2;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= SQRT expr 
            {
              Integer RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG11
 RESULT = e1-10000000;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= BLACKONE 
            {
              Integer RESULT =null;
		//@@CUPDBG12
 RESULT = 0;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= BLACKTWO 
            {
              Integer RESULT =null;
		//@@CUPDBG13
 RESULT = 0;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= BLACKTHREE 
            {
              Integer RESULT =null;
		//@@CUPDBG14
 RESULT = 103;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= BROWNONE 
            {
              Integer RESULT =null;
		//@@CUPDBG15
 RESULT = 1;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= BROWNTWO 
            {
              Integer RESULT =null;
		//@@CUPDBG16
 RESULT = 1;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= BROWNTHREE 
            {
              Integer RESULT =null;
		//@@CUPDBG17
 RESULT = 104;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= REDONE 
            {
              Integer RESULT =null;
		//@@CUPDBG18
 RESULT = 2;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= REDTWO 
            {
              Integer RESULT =null;
		//@@CUPDBG19
 RESULT = 2;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= REDTHREE 
            {
              Integer RESULT =null;
		//@@CUPDBG20
 RESULT = 105;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= ORANGEONE 
            {
              Integer RESULT =null;
		//@@CUPDBG21
 RESULT = 3;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= ORANGETWO 
            {
              Integer RESULT =null;
		//@@CUPDBG22
 RESULT = 3;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= ORANGETHREE 
            {
              Integer RESULT =null;
		//@@CUPDBG23
 RESULT = 106;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= YELLOWONE 
            {
              Integer RESULT =null;
		//@@CUPDBG24
 RESULT = 4;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= YELLOWTWO 
            {
              Integer RESULT =null;
		//@@CUPDBG25
 RESULT = 4;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= YELLOWTHREE 
            {
              Integer RESULT =null;
		//@@CUPDBG26
 RESULT = 107;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= GREENONE 
            {
              Integer RESULT =null;
		//@@CUPDBG27
 RESULT = 5;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= GREENTWO 
            {
              Integer RESULT =null;
		//@@CUPDBG28
 RESULT = 5;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= GREENTHREE 
            {
              Integer RESULT =null;
		//@@CUPDBG29
 RESULT = 108;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= BLUEONE 
            {
              Integer RESULT =null;
		//@@CUPDBG30
 RESULT = 6;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= BLUETWO 
            {
              Integer RESULT =null;
		//@@CUPDBG31
 RESULT = 6;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= BLUETHREE 
            {
              Integer RESULT =null;
		//@@CUPDBG32
 RESULT = 109;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= PURPLEONE 
            {
              Integer RESULT =null;
		//@@CUPDBG33
 RESULT = 7;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= PURPLETWO 
            {
              Integer RESULT =null;
		//@@CUPDBG34
 RESULT = 7;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= PURPLETHREE 
            {
              Integer RESULT =null;
		//@@CUPDBG35
 RESULT = 110;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= GRAYONE 
            {
              Integer RESULT =null;
		//@@CUPDBG36
 RESULT = 8;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= GRAYTWO 
            {
              Integer RESULT =null;
		//@@CUPDBG37
 RESULT = 8;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= WHITEONE 
            {
              Integer RESULT =null;
		//@@CUPDBG38
 RESULT = 9;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= WHITETWO 
            {
              Integer RESULT =null;
		//@@CUPDBG39
 RESULT = 9;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= SILVERTHREE 
            {
              Integer RESULT =null;
		//@@CUPDBG40
 RESULT = 101;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= SILVERFOUR 
            {
              Integer RESULT =null;
		//@@CUPDBG41
 RESULT = 1000;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= GOLDENTHREE 
            {
              Integer RESULT =null;
		//@@CUPDBG42
 RESULT = 102;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= GOLDENFOUR 
            {
              Integer RESULT =null;
		//@@CUPDBG43
 RESULT = 1500;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= MINUS expr 
            {
              Integer RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG44
 RESULT = -e;           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= LPAREN expr RPAREN 
            {
              Integer RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG45
 RESULT = e;           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= NUMBER 
            {
              Integer RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG46
 RESULT = n;           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
